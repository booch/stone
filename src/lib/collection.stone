* Leaning strongly towards `Foldable` as the primary building block for Sequences and Collections
    * Perhaps every sub-type of `Anything` will be `Foldable`
        * Other than maybe `Function`


Container := Interface({

    @name := "Container"
    @interfaces := List(Foldable)

    size :: Number.Integer.Cardinal

    includes?(element) := { ... }  # Think of it as "if this includes that".

    # Most of this should probably be in Foldable.

    map(fn) := { ... }

    any?(fn) := { ... }
    all?(fn) := { ... }
    one?(fn) := { ... }
    none?(fn) := { ... }

    sliced(n) := { ... }  # Sliced into "blocks" of n elements each.
    group_by(fn) := { ... }
    sorted := { ... }
    sorted_by(fn) := { ... }

    find
    filter
    unique
    uniq := unique
    reduce := foldl
    
    inject := foldl
    collect := map
    select
    detect
    reject

    tally(Function) :: Map[Any, Number.Integer.Cardinal]
    tally(fn) := { ... }

})
    