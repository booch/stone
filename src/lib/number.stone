# Things like Date and Time and Measurement are Numeric, in addition to Number.
# They allow Arithmetic operators.
# TODO: How do we handle when it’s only a subset of the operators?
# We might need an interface for each operation.
# In that case, it’s not clear that Numeric would be a useful concept anymore.
# I suppose Numeric might mean Addable + Multiplyable + some other operations
Numeric := Interface.Definition(name: “Numeric”, {
    
})


Number := Interface({

    @interfaces := List(Numeric, Comparable)
    
    # Assuming we have Number.Root(n, r), which represents the r'th root of n, where n and r are Rational.
    # We might skip having the Root class, and just implement everything in Algebraic.
    # But I think the union would be best.
    Algebraic := Type.Union(Integer, Root)
    
    # Transcendental number - cannot be found as a result of an algebraic equation with integer coefficients
    Transcendental := Type.difference(Complex, Algebraic)
    
    # Do we have the Circle-Ellipse problem here?
    # Complex has-an Imaginary and has-a Real. An Imaginary is-a Complex.
    # I need to think about how Imaginary and Algebraic relate.
    Imaginary := ...
    Complex := ...
}


# NOTE: We call it `FloatingPoint` instead of `Float`, as syntactic vinegar.
# For the majority of cases, you should choose Decimal instead of FloatingPoint.
# Also, using FloatingPoint should require an explicit `import`.
Number.FloatingPoint := ...

# TODO: How can we change this, depending on if we’ve included the Posit library?
# Or added other numeric types that would be considered “Real”?
# Maybe we can append to a Type.Union?
# Probably has to be resolved in a prelude.
# Maybe just have some conditionals when the property is computed?
Number.Real := Property[Type] { Type.Union(Number.Integer, Number.Decimal,
    Number.Rational, Number.FloatingPoint, Number.Posit) }

# These values should probably be all-caps, but I don’t like that for some reason.
# TODO: Make sure these are all used appropriately everywhere necessary.
# TODO: Make sure we handle math with all of these, in combination with each other.
# TODO: Do we need NaN or an Error if we add positive and negative Infinity?
#    Yes, follow Ruby’s lead here.
#    Or multiply an Infinity and an Infinitesimal.
#    Would NaN be another Infinity in that case?
Infinity := Type.Enum(name: “Infinity”, value: Positive, value: Negative, implements: Numeric)
Infinitesimal := Type.Enum(name: “Infinitesimal”, value: Positive, value: Negative, implements: Numeric)


Polynomial := Class(name: “Polynomial”, implements: Numeric, {
    ...
})


Number.Integer := Class ({
    @name := "Integer"
    @interfaces := List(Number)

    even? := __BUILTIN__.Integer.even?
    odd? := { !even? }

    # TODO: Define an interface for these. Most Number classes should implement these; Complex cannot, AFAIK.
    zero? := { @ =? 0 }
    positive? := { @ > 0 }
    negative? := { @ < 0 }
})

Number.Integer.Positive := Class({
    @superclass := Number.Integer
    Positive := { @.positive? }
})

Number.Integer.NonNegative := Class({
    @superclass := Number.Integer
    NonNegative := { !@.negative? }
})

# For counting the size or length of anything.
# Need the `Infinity.Positive` bit for at least `Type.cardinality`.
Number.Integer.Cardinal := Type.Union(Integer.NonNegative, Infinity.Positive)
    
# For describing the position of anything. Note that this is 1-based.
# Also note that we don’t allow negative numbers for referencing the 
# position relative to the end of something; we’ll have separate methods.
Number.Integer.Ordinal := Integer.Positive

Number.Natural := Number.Integer.Positive
Number.Whole := Number.Integer.NonNegative

# Distributive means "in groups of".
# This should be used for iteration and grouping.
Number.Integer.Distributive := Integer.NonNegative
